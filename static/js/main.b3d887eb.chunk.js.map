{"version":3,"sources":["share/enum/ActionEnum.ts","pathFindingVisualizer/board/square/Square.tsx","share/model/Point.ts","pathFindingVisualizer/board/Board.tsx","pathFindingVisualizer/tools/ToolPanel.tsx","share/model/TreeNode.ts","share/util/TreeUtil.ts","share/model/DijkstraModel.ts","share/model/DijkstraResultModel.ts","share/algorithm/dijkstra/Dijkstra.ts","share/model/SquareModel.ts","pathFindingVisualizer/PathFindingVisualizer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionEnum","Square","props","getBackgroundColor","isNil","squareModel","nodeColor","action","wall","clean","none","showHoverIcon","state","isHovered","start","end","actionSelected","icon","faPencilAlt","faEraser","color","faArrowRight","faBullseye","onMouseDown","onChangeAction","position","onMouseEnter","setState","isClicked","onMouseLeave","showIcon","render","className","style","backgroundColor","onMouseUp","Component","Point","col","row","_col","_row","this","Board","renderSquare","colIndex","rowIndex","key","uuidv4","point","createBoard","actionMatrix","elementArray","colArray","colElementArray","push","ToolPanel","playButtonRender","playButton","onClick","onPlay","faPlay","size","pauseButton","disabled","isPlaying","faPause","type","onAction","faStepBackward","id","readOnly","min","value","steps","faStepForward","speed","onChange","onSpeedChange","Number","target","htmlFor","TreeNode","childArray","isEnd","distant","_id","_position","_childArray","_distant","_isEnd","TreeUtil","fifoStack","positionChecked","matrixToTree","matrix","initPosition","nodeTree","isEmpty","node","shift","rightNode","createTreeNode","leftNode","upNode","downNode","addToFatherNode","addNodesQueue","length","squreModel","has","add","console","log","e","Set","fatherNode","DijkstraModel","currentNode","previousTreeNode","_currentNode","_previousTreeNode","a","b","DijkstraResultModel","dijkstraStepResults","path","_dijkstraStepResults","_path","Dijkstra","visited","dijkstraModelArray","calculateShorterPath","treeNodeArray","currentDijkstra","iterateChild","getNextNotVisitedNode","createPath","reverse","childTreeNode","hasVisited","updateDijkstraModelArray","previousNode","existInDijkstraModelArray","find","dijkstra","notVisitedNodeArray","filter","sort","compare","nodeKey","lastNode","findDijkstraByCurrentNode","dijkstraModel","SquareModel","_action","_nodeColor","PathFindingVisualizer","setActionState","setIsClicked","createActionMatrix","numberRows","numberCol","actionColArray","updateActionMatrix","actionMatrixCopy","cleanActionMatrix","slice","cleanStarPosition","cleanEndPosition","startPosition","endPosition","executeDijkstraAlgorithm","dijkstraResultModel","paintSimulation","then","_","paintPath","getCleanPathMatrix","delay","ms","Promise","res","setTimeout","squareModelAux","getColorByDistant","pathPosition","colPosition","rowPosition","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b3d887eb.chunk.js","sourcesContent":["\nexport enum ActionEnum {\n    none = 0,\n    start = 1,\n    end = 2,\n    wall = 3,\n    clean = 4,\n}","import React, {Component, ReactElement} from \"react\";\nimport \"./Square.css\"\nimport {faArrowRight, faBullseye, faEraser, faPencilAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {ActionEnum} from \"../../../share/enum/ActionEnum\";\nimport {Point} from \"../../../share/model/Point\";\nimport {SquareModel} from \"../../../share/model/SquareModel\";\nimport {isNil} from \"lodash\";\n\nexport interface ISquareProps {\n    actionSelected: ActionEnum;\n    squareModel: SquareModel;\n    isClicked: boolean;\n    position: Point;\n    onMouseDown: () => void;\n    onMouseUp: () => void;\n    onChangeAction: (point: Point) => void;\n}\n\nexport interface ISquareState {\n    isHovered: boolean;\n}\n\nexport class Square extends Component<ISquareProps, ISquareState>{\n\n    constructor(props: ISquareProps) {\n        super(props);\n\n        this.state = {\n            isHovered: false\n        };\n    }\n\n    private getBackgroundColor = (): string => {\n\n        if (!isNil(this.props.squareModel.nodeColor)) return this.props.squareModel.nodeColor;\n\n        switch (this.props.squareModel.action) {\n            case ActionEnum.wall:\n                return 'black';\n            case ActionEnum.clean:\n                return 'white';\n            case ActionEnum.none:\n                return 'white';\n        }\n\n        return 'white';\n    }\n\n    private showHoverIcon = (): ReactElement | null => {\n\n        if (!this.state.isHovered\n            || this.props.squareModel.action === ActionEnum.start\n            || this.props.squareModel.action === ActionEnum.end) return null;\n\n        switch (this.props.actionSelected) {\n            case ActionEnum.wall:\n                return (<FontAwesomeIcon icon={faPencilAlt} />);\n            case ActionEnum.clean:\n                return (<FontAwesomeIcon icon={faEraser} color=\"white\" />);\n            case ActionEnum.start:\n                return (<FontAwesomeIcon icon={faArrowRight} />);\n            case ActionEnum.end:\n                return (<FontAwesomeIcon icon={faBullseye} />);\n            case ActionEnum.none:\n                return null;\n        }\n    }\n\n    private onMouseDown = (): void => {\n        this.props.onChangeAction(this.props.position);\n        this.props.onMouseDown()\n    }\n\n    private onMouseEnter = (): void => {\n        this.setState({\n            isHovered: true\n        });\n\n        if (this.props.isClicked)\n            this.props.onChangeAction(this.props.position);\n    }\n\n    private onMouseLeave = (): void => {\n        this.setState({\n            isHovered: false\n        })\n    }\n\n    private showIcon = (): ReactElement | null => {\n        switch (this.props.squareModel.action) {\n            case ActionEnum.start:\n                return (<FontAwesomeIcon icon={faArrowRight} />);\n            case ActionEnum.end:\n                return (<FontAwesomeIcon icon={faBullseye} />);\n        }\n\n        return null;\n    }\n\n    render = (): ReactElement => {\n        return (\n            <button className=\"square\"\n                    style={{ backgroundColor: this.getBackgroundColor() }}\n                    onMouseDown={() => this.onMouseDown()}\n                    onMouseUp={() => this.props.onMouseUp()}\n                    onMouseEnter={() => this.onMouseEnter()}\n                    onMouseLeave={() => this.onMouseLeave()}\n            >\n                { this.showIcon() }\n                { this.showHoverIcon() }\n            </button>\n        );\n    }\n}","\nexport class Point {\n\n    private readonly _col: number;\n    private readonly _row: number;\n\n    constructor(col: number, row: number) {\n        this._col = col;\n        this._row = row;\n    }\n\n    get col(): number {\n        return this._col;\n    }\n\n    get row(): number {\n        return this._row;\n    }\n}","import {Component, ReactElement} from \"react\";\nimport React from \"react\";\nimport {Square} from \"./square/Square\";\nimport \"./Board.css\"\nimport {ActionEnum} from \"../../share/enum/ActionEnum\";\nimport {Point} from \"../../share/model/Point\";\nimport {SquareModel} from \"../../share/model/SquareModel\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport interface IBoardProps {\n    actionSelected: ActionEnum;\n    actionMatrix: Array<Array<SquareModel>>;\n    isClicked: boolean;\n    onMouseDown: () => void;\n    onMouseUp: () => void;\n    onChangeAction: (point: Point) => void;\n}\n\nexport interface IBoardState {\n\n}\n\nexport class Board extends Component<IBoardProps, IBoardState> {\n\n    private renderSquare = (colIndex: number, rowIndex: number, squareModel: SquareModel): ReactElement => {\n        return <Square\n            key={uuidv4()}\n            actionSelected={this.props.actionSelected}\n            position={new Point(colIndex, rowIndex)}\n            squareModel={squareModel}\n            isClicked={this.props.isClicked}\n            onMouseDown={() => this.props.onMouseDown()}\n            onMouseUp={() => this.props.onMouseUp()}\n            onChangeAction={(point: Point) => this.props.onChangeAction(point)}\n        />;\n    }\n\n    private createBoard = (actionMatrix: Array<Array<SquareModel>>): Array<ReactElement> => {\n        const elementArray: Array<ReactElement> = [];\n        let colIndex: number = 0;\n        for (let colArray of actionMatrix) {\n            let rowIndex: number = 0;\n            const colElementArray: Array<ReactElement> = [];\n            for (let squareModel of colArray) {\n                colElementArray.push(this.renderSquare(colIndex, rowIndex, squareModel));\n                rowIndex += 1;\n            }\n            colIndex += 1;\n            elementArray.push(<div className=\"board-row\" key={uuidv4()}>{colElementArray}</div>);\n        }\n\n        return elementArray;\n    }\n\n    render = (): ReactElement => {\n        return (\n            <div className=\"board\">\n                {this.createBoard(this.props.actionMatrix)}\n            </div>\n        );\n    }\n\n}\n","import React, {Component, ReactElement} from \"react\";\nimport \"./ToolPanel.css\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faArrowRight, faBullseye, faEraser, faPause,\n    faPencilAlt, faPlay, faStepBackward, faStepForward\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {ActionEnum} from \"../../share/enum/ActionEnum\";\n\nexport interface IToolPanelProps {\n    speed: number;\n    steps: number;\n    isPlaying: boolean;\n    onSpeedChange: (value: number) => void;\n    onAction: (action: ActionEnum) => void;\n    onPlay: () => void;\n}\n\nexport class ToolPanel extends Component<IToolPanelProps, {}> {\n\n    private playButtonRender = (): ReactElement => {\n\n        const playButton: ReactElement = (\n            <button className=\"btn btn-outline-secondary\"\n                    onClick={() => this.props.onPlay()}\n            >\n                <FontAwesomeIcon icon={faPlay} size=\"sm\"/>\n                <span>play</span>\n            </button>\n        );\n\n        const pauseButton: ReactElement = (\n            <button className=\"btn btn-outline-secondary\"\n                    onClick={() => this.props.onPlay()}\n                    disabled={this.props.isPlaying}\n            >\n                <FontAwesomeIcon icon={faPause} size=\"sm\"/>\n                <span>pause</span>\n            </button>\n        );\n\n        return this.props.isPlaying ? pauseButton : playButton;\n    }\n\n    render = (): ReactElement => {\n        return (\n            <div className=\"card tool\">\n                <div className=\"card-header\">\n                    Tools\n                </div>\n                <div className=\"card-body\">\n                    <div className=\"row\">\n\n                        <div className=\"col-5\">\n                            <div className=\"row\">\n\n                                <div className=\"col-3\">\n                                    <button type=\"button\"\n                                            className=\"btn btn-outline-secondary\"\n                                            onClick={() => this.props.onAction(ActionEnum.wall)}\n                                            disabled={this.props.isPlaying}\n                                    >\n                                        <FontAwesomeIcon icon={faPencilAlt} size=\"sm\"/>\n                                        <span>Wall</span>\n                                    </button>\n                                </div>\n\n                                <div className=\"col-3\">\n                                    <button type=\"button\"\n                                            className=\"btn btn-outline-secondary\"\n                                            onClick={() => this.props.onAction(ActionEnum.clean)}\n                                            disabled={this.props.isPlaying}\n                                    >\n                                        <FontAwesomeIcon icon={faEraser} size=\"sm\"/>\n                                        <span>clean</span>\n                                    </button>\n                                </div>\n\n                                <div className=\"col-3\">\n                                    <button className=\"btn btn-outline-secondary\"\n                                            onClick={() => this.props.onAction(ActionEnum.start)}\n                                            disabled={this.props.isPlaying}\n                                    >\n                                        <FontAwesomeIcon icon={faArrowRight} size=\"sm\"/>\n                                        <span>start</span>\n                                    </button>\n                                </div>\n\n                                <div className=\"col-3\">\n                                    <button className=\"btn btn-outline-secondary\"\n                                            onClick={() => this.props.onAction(ActionEnum.end)}\n                                            disabled={this.props.isPlaying}\n                                    >\n                                        <FontAwesomeIcon icon={faBullseye} size=\"sm\"/>\n                                        <span>end</span>\n                                    </button>\n                                </div>\n\n                            </div>\n                        </div>\n\n                        <div className=\"col-7\">\n                            <div className=\"row\">\n\n                                <div className=\"col-2\">\n                                    { this.playButtonRender()}\n                                </div>\n\n                                <div className=\"col-2\">\n                                    <button className=\"btn btn-outline-secondary\"\n                                            disabled={true}\n                                    >\n                                        <FontAwesomeIcon icon={faStepBackward} size=\"sm\"/>\n                                        <span>prev</span>\n                                    </button>\n                                </div>\n\n                                <div className=\"col-3\">\n                                    <input id=\"steps\"\n                                           readOnly={true}\n                                           className=\"form-control form-control-sm\"\n                                           type=\"number\"\n                                           min=\"0\"\n                                           value={this.props.steps}/>\n                                </div>\n\n                                <div className=\"col-2\">\n                                    <button className=\"btn btn-outline-secondary\"\n                                            disabled={true}\n                                    >\n                                        <FontAwesomeIcon icon={faStepForward} size=\"sm\"/>\n                                        <span>next</span>\n                                    </button>\n                                </div>\n\n                                <div className=\"col-3\">\n                                    <div className=\"form-group row\">\n                                        <div className=\"col-7\">\n                                            <input id=\"time\"\n                                                   className=\"form-control form-control-sm\"\n                                                   type=\"number\"\n                                                   min=\"0\"\n                                                   disabled={this.props.isPlaying}\n                                                   value={this.props.speed}\n                                                   onChange={(value) => this.props.onSpeedChange(Number(value.target.value))}\n                                            />\n                                        </div>\n                                        <label htmlFor=\"time\" className=\"col-5\">ms</label>\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}","import {Point} from \"./Point\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport class TreeNode {\n    private readonly _id: string;\n    private readonly _position: Point;\n    private readonly _childArray: Array<TreeNode>;\n    private _distant: number | null;\n    private readonly _isEnd: boolean;\n\n\n    constructor(position: Point, childArray: Array<TreeNode>, isEnd: boolean, distant: number | null) {\n        this._id = uuidv4();\n        this._position = position;\n        this._childArray = childArray;\n        this._isEnd = isEnd;\n        this._distant = distant;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    get position(): Point {\n        return this._position;\n    }\n\n    get childArray(): Array<TreeNode> {\n        return this._childArray;\n    }\n\n    get isEnd(): boolean {\n        return this._isEnd;\n    }\n\n    get distant(): number | null {\n        return this._distant;\n    }\n\n    set distant(value: number | null) {\n        this._distant = value;\n    }\n}","import {ActionEnum} from \"../enum/ActionEnum\";\nimport {Point} from \"../model/Point\";\nimport {TreeNode} from \"../model/TreeNode\";\nimport {isEmpty, isNil} from \"lodash\";\nimport {SquareModel} from \"../model/SquareModel\";\n\nexport class TreeUtil {\n\n    fifoStack: Array<TreeNode>;\n    positionChecked: Set<string>;\n\n    constructor() {\n        this.fifoStack = [];\n        this.positionChecked = new Set<string>();\n    }\n\n\n    matrixToTree = (matrix: Array<Array<SquareModel>>, initPosition: Point): Array<TreeNode> => {\n\n        this.fifoStack = [new TreeNode(initPosition, [], false, null)];\n        const nodeTree: Array<TreeNode> = [];\n\n        while (!isEmpty(this.fifoStack)) {\n            const node: TreeNode | undefined = this.fifoStack.shift();\n            if (!isNil(node)) {\n                const position: Point = node.position;\n                const rightNode: TreeNode | null = this.createTreeNode(matrix, position.col, position.row - 1);\n                const leftNode: TreeNode | null = this.createTreeNode(matrix, position.col, position.row + 1);\n                const upNode: TreeNode | null = this.createTreeNode(matrix, position.col - 1, position.row);\n                const downNode: TreeNode | null = this.createTreeNode(matrix, position.col + 1, position.row);\n\n                TreeUtil.addToFatherNode(node, rightNode, leftNode, upNode, downNode);\n                this.addNodesQueue(rightNode, leftNode, upNode, downNode);\n                nodeTree.push(node);\n            }\n        }\n\n        return nodeTree;\n    }\n\n    private createTreeNode = (matrix: Array<Array<SquareModel>>, col: number, row: number): TreeNode | null => {\n\n\n        if (col < 0 || col >= (matrix.length)) return null;\n        if (row < 0 || row >= (matrix[col].length))  return null;\n\n\n        try {\n            const squreModel: SquareModel = matrix[col][row];\n\n            if (this.positionChecked.has(squreModel.id)) return null;\n            this.positionChecked.add(squreModel.id);\n\n            if (isNil(squreModel.action) || squreModel.action === ActionEnum.start || squreModel.action === ActionEnum.wall) {\n                console.log(\"wall\");\n                return null;\n            }\n\n            return new TreeNode(new Point(col, row), [], squreModel.action === ActionEnum.end, null);\n        } catch (e) {\n            console.log(\"Errror: \", col);\n            return null;\n        }\n    }\n\n    private addNodesQueue = (rightNode: TreeNode | null, leftNode: TreeNode | null,\n                          upNode: TreeNode | null, downNode: TreeNode | null) => {\n\n        if (!isNil(rightNode)) this.fifoStack.push(rightNode);\n        if (!isNil(leftNode)) this.fifoStack.push(leftNode);\n        if (!isNil(upNode)) this.fifoStack.push(upNode);\n        if (!isNil(downNode)) this.fifoStack.push(downNode);\n    }\n\n    private static addToFatherNode = (fatherNode: TreeNode, rightNode: TreeNode | null,\n                                   leftNode: TreeNode | null, upNode: TreeNode | null, downNode: TreeNode | null) => {\n\n        if (!isNil(rightNode)) fatherNode.childArray.push(rightNode);\n        if (!isNil(leftNode)) fatherNode.childArray.push(leftNode);\n        if (!isNil(upNode)) fatherNode.childArray.push(upNode);\n        if (!isNil(downNode)) fatherNode.childArray.push(downNode);\n    }\n}","import {TreeNode} from \"./TreeNode\";\n\nexport class DijkstraModel {\n\n    private readonly _currentNode: TreeNode;\n    private readonly _previousTreeNode: TreeNode | null;\n    private _distant: number;\n\n    constructor(currentNode: TreeNode, previousTreeNode: TreeNode | null, distant: number) {\n        this._currentNode = currentNode;\n        this._previousTreeNode = previousTreeNode;\n        this._distant = distant;\n    }\n\n    get currentNode(): TreeNode {\n        return this._currentNode;\n    }\n\n    get previousTreeNode(): TreeNode | null {\n        return this._previousTreeNode;\n    }\n\n    get distant(): number {\n        return this._distant;\n    }\n\n    set distant(value: number) {\n        this._distant = value;\n    }\n\n    static compare(a: DijkstraModel, b: DijkstraModel): number {\n        if (a.distant < b.distant){\n            return -1;\n        }\n        if (a.distant > b.distant){\n            return 1;\n        }\n        return 0;\n    }\n\n}","import {DijkstraModel} from \"./DijkstraModel\";\nimport {Point} from \"./Point\";\n\nexport class DijkstraResultModel {\n\n    private readonly _dijkstraStepResults: Array<DijkstraModel>;\n    private readonly _path: Array<Point>;\n\n    constructor(dijkstraStepResults: Array<DijkstraModel>, path: Array<Point>) {\n        this._dijkstraStepResults = dijkstraStepResults;\n        this._path = path;\n    }\n\n    get dijkstraStepResults(): Array<DijkstraModel> {\n        return this._dijkstraStepResults;\n    }\n\n    get path(): Array<Point> {\n        return this._path;\n    }\n}","import {TreeNode} from \"../../model/TreeNode\";\nimport { isNil, isEmpty } from \"lodash\";\nimport {DijkstraModel} from \"../../model/DijkstraModel\";\nimport {Point} from \"../../model/Point\";\nimport {DijkstraResultModel} from \"../../model/DijkstraResultModel\";\n\nexport class Dijkstra {\n\n    visited: Set<string>;\n    dijkstraModelArray: Array<DijkstraModel>;\n\n    constructor() {\n        this.visited = new Set<string>();\n        this.dijkstraModelArray = [];\n    }\n\n    calculateShorterPath = (treeNodeArray: Array<TreeNode>): DijkstraResultModel => {\n\n        let currentNode: TreeNode | null = treeNodeArray[0];\n\n\n        do {\n            this.visited.add(currentNode.id);\n            const distant: number = isNil(currentNode.distant) ? 0 : currentNode.distant;\n            const currentDijkstra: DijkstraModel = new DijkstraModel(currentNode, null, distant);\n            this.dijkstraModelArray.push(currentDijkstra);\n            this.iterateChild(currentDijkstra);\n            currentNode = this.getNextNotVisitedNode();\n        } while (!isNil(currentNode) && !currentNode.isEnd);\n\n        if (isNil(currentNode)) return new DijkstraResultModel([], []);\n\n        const path: Array<Point> = this.createPath(currentNode).reverse();\n\n        return new DijkstraResultModel(this.dijkstraModelArray, path);\n    }\n\n    private iterateChild = (currentDijkstra: DijkstraModel) => {\n\n        const currentNode: TreeNode = currentDijkstra.currentNode;\n\n        for (let childTreeNode of currentNode.childArray) {\n            if (!this.hasVisited(childTreeNode)) {\n                childTreeNode.distant = currentDijkstra.distant + 1;\n                this.updateDijkstraModelArray(childTreeNode, currentNode, childTreeNode.distant);\n            }\n        }\n\n    }\n\n    private updateDijkstraModelArray = (currentNode: TreeNode, previousNode: TreeNode, distant: number): void => {\n\n        const existInDijkstraModelArray: DijkstraModel | undefined = this.dijkstraModelArray.find(dijkstra => dijkstra.currentNode === currentNode);\n\n        if (isNil(existInDijkstraModelArray)) {\n            this.dijkstraModelArray.push(new DijkstraModel(currentNode, previousNode, distant));\n        } else if (existInDijkstraModelArray.distant > distant) {\n            existInDijkstraModelArray.distant = distant;\n        }\n    }\n\n    private getNextNotVisitedNode = (): TreeNode | null => {\n        const notVisitedNodeArray: Array<DijkstraModel> = this.dijkstraModelArray\n            .filter(dijkstra => !this.visited.has(dijkstra.currentNode.id));\n\n        if (isEmpty(notVisitedNodeArray)) return null;\n\n        return notVisitedNodeArray.sort(DijkstraModel.compare)[0].currentNode;\n    }\n\n    private hasVisited = (node: TreeNode): boolean => {\n\n        const nodeKey: string = node.id;\n\n        return this.visited.has(nodeKey);\n    }\n\n    private createPath = (lastNode: TreeNode): Array<Point>  => {\n        const path: Array<Point> = [];\n        let currentNode: DijkstraModel | undefined = this.findDijkstraByCurrentNode(lastNode);\n\n        do {\n            if (!isNil(currentNode)) {\n                const dijkstraModel: DijkstraModel = currentNode;\n                path.push(dijkstraModel.currentNode.position);\n                currentNode = this.findDijkstraByCurrentNode(dijkstraModel.previousTreeNode);\n            }\n        }\n        while (!isNil(currentNode));\n\n        return path;\n    }\n\n    private findDijkstraByCurrentNode = (currentNode: TreeNode | null): DijkstraModel | undefined => {\n\n        if (isNil(currentNode)) return undefined;\n\n        return this.dijkstraModelArray.find(dijkstra => dijkstra.currentNode === currentNode)\n    }\n}","import {ActionEnum} from \"../enum/ActionEnum\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport class SquareModel {\n\n    private readonly _id: string;\n    private readonly _action: ActionEnum;\n    private readonly _nodeColor: string | null;\n\n    constructor(action: ActionEnum, nodeColor: string | null) {\n        this._id = uuidv4();\n        this._action = action;\n        this._nodeColor = nodeColor;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    get action(): ActionEnum {\n        return this._action;\n    }\n\n    get nodeColor(): string | null {\n        return this._nodeColor;\n    }\n}","import React, {Component, ReactElement} from \"react\";\nimport \"./PathFindingVisualizer.css\"\nimport {Board} from \"./board/Board\";\nimport {ToolPanel} from \"./tools/ToolPanel\";\nimport {ActionEnum} from \"../share/enum/ActionEnum\";\nimport {Point} from \"../share/model/Point\";\nimport {TreeNode} from \"../share/model/TreeNode\";\nimport {TreeUtil} from \"../share/util/TreeUtil\";\nimport {isNil} from \"lodash\";\nimport {Dijkstra} from \"../share/algorithm/dijkstra/Dijkstra\";\nimport {SquareModel} from \"../share/model/SquareModel\";\nimport {DijkstraResultModel} from \"../share/model/DijkstraResultModel\";\nimport {DijkstraModel} from \"../share/model/DijkstraModel\";\n\nexport interface IPathFindingVisualizerProps {}\nexport interface IPathFindingVisualizerState {\n    actionSelected: ActionEnum;\n    isClicked: boolean;\n    actionMatrix: Array<Array<SquareModel>>;\n    startPosition: Point | null;\n    endPosition: Point | null;\n    speed: number;\n    steps: number;\n    isPlaying: boolean;\n}\n\nexport class PathFindingVisualizer extends Component<IPathFindingVisualizerProps, IPathFindingVisualizerState>{\n\n    constructor(props: IPathFindingVisualizerProps) {\n        super(props);\n        this.state = {\n            actionSelected: ActionEnum.none,\n            isClicked: false,\n            actionMatrix: this.createActionMatrix(20, 30),\n            startPosition: null,\n            endPosition: null,\n            speed: 0,\n            steps: 0,\n            isPlaying: false\n        };\n    }\n\n    private setActionState = (action: ActionEnum): void => {\n\n        this.setState({\n            actionSelected: action,\n            isClicked: this.state.isClicked\n        });\n    }\n\n    private setIsClicked = (isClicked: boolean): void => {\n        this.setState({\n            actionSelected: this.state.actionSelected,\n            isClicked: isClicked\n        });\n    }\n\n    private createActionMatrix = (numberRows: number, numberCol: number): Array<Array<SquareModel>> => {\n\n        const actionMatrix: Array<Array<SquareModel>> = [[]];\n\n        for (let row = 0; row < numberRows; ++row) {\n            const actionColArray: Array<SquareModel> = [];\n            for (let col = 0; col < numberCol; ++col) {\n                actionColArray.push(new SquareModel(ActionEnum.none, null));\n            }\n            actionMatrix.push(actionColArray);\n        }\n\n        return actionMatrix;\n    }\n\n    private updateActionMatrix = (position: Point): void => {\n\n        const actionMatrixCopy: Array<Array<SquareModel>> = this.cleanActionMatrix(position, this.state.actionSelected);\n\n        actionMatrixCopy[position.col][position.row] = new SquareModel(this.state.actionSelected, null);\n\n        this.setState({\n            actionSelected: this.state.actionSelected,\n            actionMatrix: actionMatrixCopy,\n            isClicked: this.state.isClicked\n        });\n    }\n\n    private cleanActionMatrix = (position: Point, action: ActionEnum): Array<Array<SquareModel>> => {\n\n        const actionMatrixCopy: Array<Array<SquareModel>> = this.state.actionMatrix.slice(0);\n\n        switch (action) {\n            case ActionEnum.start:\n                this.cleanStarPosition(position, actionMatrixCopy);\n                break;\n            case ActionEnum.end:\n                this.cleanEndPosition(position, actionMatrixCopy);\n                break;\n        }\n\n        return actionMatrixCopy;\n    }\n\n    private cleanStarPosition = (position: Point, actionMatrix: Array<Array<SquareModel>>): Array<Array<SquareModel>> => {\n\n        if (this.state.startPosition !== null)\n            actionMatrix[this.state.startPosition.col][this.state.startPosition.row] = new SquareModel(ActionEnum.none, null);\n\n        this.setState({startPosition: position});\n\n        return actionMatrix;\n    }\n\n    private cleanEndPosition = (position: Point, actionMatrix: Array<Array<SquareModel>>): Array<Array<SquareModel>> => {\n\n        if (this.state.endPosition !== null)\n            actionMatrix[this.state.endPosition.col][this.state.endPosition.row] = new SquareModel(ActionEnum.none, null);\n\n        this.setState({endPosition: position});\n\n        return actionMatrix;\n    }\n\n    private executeDijkstraAlgorithm = (): void => {\n\n        if (this.state.isPlaying) return;\n\n        this.setState({isPlaying: true})\n\n        const initPosition: Point | null = this.state.startPosition;\n        if (!isNil(initPosition)) {\n            const treeNodeArray: Array<TreeNode> = new TreeUtil().matrixToTree(this.state.actionMatrix, initPosition);\n            const dijkstraResultModel: DijkstraResultModel = new Dijkstra().calculateShorterPath(treeNodeArray);\n            this.paintSimulation(dijkstraResultModel.dijkstraStepResults)\n                .then(_ => this.paintPath(dijkstraResultModel.path));\n        }\n    }\n\n    private paintSimulation = async (dijkstraStepResults: Array<DijkstraModel>): Promise<void> => {\n\n        let actionMatrixCopy: Array<Array<SquareModel>> = this.getCleanPathMatrix();\n        this.setState({steps: 0});\n        const delay = (ms: number) => new Promise(res => setTimeout(res, ms));\n\n        for (let dijkstraModel of dijkstraStepResults) {\n            const currentNode: TreeNode = dijkstraModel.currentNode;\n            const squareModelAux: SquareModel = actionMatrixCopy[currentNode.position.col][currentNode.position.row];\n            actionMatrixCopy[currentNode.position.col][currentNode.position.row] =\n                new SquareModel(squareModelAux.action, PathFindingVisualizer.getColorByDistant(dijkstraModel.distant));\n\n            this.setState({\n                actionMatrix: actionMatrixCopy.slice(0),\n                steps: this.state.steps + 1\n            });\n\n            if (this.state.speed > 1)\n                await delay(this.state.speed);\n        }\n    }\n\n    private paintPath = (path: Array<Point>): void => {\n\n        const actionMatrixCopy: Array<Array<SquareModel>> = this.state.actionMatrix.slice(0);\n\n        for (let pathPosition of path) {\n            const squareModelAux: SquareModel = actionMatrixCopy[pathPosition.col][pathPosition.row];\n            actionMatrixCopy[pathPosition.col][pathPosition.row] = new SquareModel(squareModelAux.action, 'blue');\n        }\n\n        this.setState({\n            actionMatrix: actionMatrixCopy,\n            isPlaying: false\n        });\n    }\n\n    private getCleanPathMatrix = (): Array<Array<SquareModel>> => {\n        const actionMatrixCopy: Array<Array<SquareModel>> = this.state.actionMatrix.slice(0);\n\n        for (let colPosition = 0; colPosition < actionMatrixCopy.length; ++colPosition) {\n            for (let rowPosition = 0; rowPosition < actionMatrixCopy[colPosition].length; ++rowPosition) {\n                const squareModelAux: SquareModel = actionMatrixCopy[colPosition][rowPosition];\n                actionMatrixCopy[colPosition][rowPosition] = new SquareModel(squareModelAux.action, null);\n            }\n        }\n\n        return actionMatrixCopy;\n    }\n\n    private static getColorByDistant(distant: number): string {\n        if (distant < 6) return 'green';\n        if (distant < 12) return 'yellow';\n        if (distant < 18) return 'orange';\n\n        return 'red';\n    }\n\n    render = (): ReactElement => {\n        return (\n            <div className=\"container\">\n                <div className=\"col-12\">\n                    <div className=\"row\">\n\n                        <div className=\"path-finding\">\n\n                            <div className=\"col-12\">\n                                <div className=\"row\">\n                                    <h1 className=\"text-center title\">Dijkstra</h1>\n                                </div>\n                                <div className=\"row\">\n                                    <ToolPanel\n                                        speed={this.state.speed}\n                                        steps={this.state.steps}\n                                        isPlaying={this.state.isPlaying}\n                                        onSpeedChange={(value: number) => this.setState({speed: value})}\n                                        onAction={(action: ActionEnum) => this.setActionState(action)}\n                                        onPlay={() => this.executeDijkstraAlgorithm()}\n                                    >\n                                    </ToolPanel>\n                                </div>\n                                <div className=\"row\">\n                                    <Board\n                                        actionMatrix={this.state.actionMatrix}\n                                        actionSelected={this.state.actionSelected}\n                                        isClicked={this.state.isClicked}\n                                        onMouseDown={() => this.setIsClicked(true)}\n                                        onMouseUp={() => this.setIsClicked(false)}\n                                        onChangeAction={(point: Point) => this.updateActionMatrix(point)}\n                                    />\n                                </div>\n                            </div>\n\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {PathFindingVisualizer} from \"./pathFindingVisualizer/PathFindingVisualizer\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <PathFindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}